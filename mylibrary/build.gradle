import com.github.megatronking.stringfog.plugin.kg.RandomKeyGenerator
plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'maven-publish'
    id 'stringfog'
}

//// 这个是把源码打入aar包中的任务
//task sourceJar(type: Jar) {
//    archiveClassifier.set('sources')
//    from android.sourceSets.main.java.srcDirs
//}

stringfog {
    // 必要：加解密库的实现类路径，需和上面配置的加解密算法库一致。
    implementation 'com.github.megatronking.stringfog.xor.StringFogImpl'
    // 可选：加密开关，默认开启。
    enable true
    // 可选：指定需加密的代码包路径，可配置多个，未指定将默认全部加密。
//    fogPackages = ['com.xxx.xxx']
    // 可选（3.0版本新增）：指定密钥生成器，默认使用长度8的随机密钥（每个字符串均有不同随机密钥）,
    // 也可以指定一个固定的密钥：HardCodeKeyGenerator("This is a key")
    kg new RandomKeyGenerator()
    // 可选（4.0版本新增）：用于控制字符串加密后在字节码中的存在形式, 默认为base64，
    // 也可以使用text或者bytes
    mode base64
}
android {
    namespace 'com.example.mylibrary'
    compileSdk 33
    defaultConfig {
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        pickFirst 'META-INF/INDEX.LIST'
    }

}

dependencies {
//    api "io.reactivex.rxjava3:rxjava:3.1.6"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
}

// 发布到 JitPack
publishing {
    publications {
        // 配置发布的库名称和类型
        maven(MavenPublication) {
            groupId 'com.github.maodoumao'
            artifactId 'store'
            version '1.0.6'

            // 配置发布的 AAR 文件
            artifact("$buildDir/outputs/aar/mylibrary-debug.aar")
        }
    }
}

//afterEvaluate {
//    publishing {
//        publications {
//            // Creates a Maven publication called "release".
//            release(MavenPublication) {
//                from components.release
//                groupId = 'com.github.maodoumao'
//                artifactId = 'store'
//                version = '1.0.1'
//            }
//        }
//    }
//}

//afterEvaluate {
//    publishing {
//        publications {
//            // 这里的debug名字是自己起的
//            release(MavenPublication) {
//                groupId = 'com.github.store'
//                artifactId = 'mylibrary'
//                version = "1.0.3"
//                // 这里除了有debug 还有release
////                from components.release
//                // 运行任务，把源码打进去
//                artifact sourceJar
//            }
//        }
//        // 添加仓库地址
//        repositories {
//            // 本地仓库
//            mavenLocal()
//            maven {
////            // change to point to your repo, e.g. http://my.org/repo
//            url = layout.buildDirectory.dir('repo')
//        }
//            // 当上传到远端仓库
////            maven {
////                url("")
////                credentials {
////                    username = ""
////                    password = ""
////                }
////          }
//        }
//    }
//}
